
@{
    ViewData["Title"] = "Index";
}

<h1>聊天室</h1>
<div class="row" style="height:70vh">
    <div class="col-md-3 list-group custom-list-group" id="userList" style="max-height: 100%; overflow-y: auto;">
    </div>
    <div class="col-md-9 card justify-content-end align-items-center">
        <div class="" id="chatDetail" style="width:100%;max-height: 66vh; overflow-y: auto;">請選擇聊天對象以開始對話</div>

        <span class="input-group">
            <input type="text" placeholder="Input some words..." class="form-control" autocomplete="off" name="sendMessage" tabindex="101" value="">
            <button tabindex="102" class="input-group-text" type="submit" value=""><i class="bi bi-send"></i></button>
        </span>
    </div>
</div>

@section Scripts{
    <script>
        const userList = document.querySelector('#userList');
        async function loadUser() {
            const response = await fetch('@Url.Content("~/ChatApi/UserList/")');
            const data = await response.json();
            let chatAvaterUrl;//存聊天對象頭像備用

            const user = data.map(u =>{//抓左邊聊天對象列表的map
                const messageTime = new Date(u.latestMessage.created);//這個是以毫秒為單位
                const nowTime=new Date();
                const timeGap = nowTime - messageTime;
                const messageDate = messageTime.getDate();
                const currentDate = nowTime.getDate();

                let timeDisplay;
                if (currentDate === messageDate) 
                {
                    const options = { hour: 'numeric', minute: 'numeric', hour12: false };//24H制
                    timeDisplay = messageTime.toLocaleTimeString(undefined, options);
                }
                else if (timeGap < 1 * 24 * 60 * 60 * 1000) //24H*60M*60S 一天內但已經換日
                {
                    const options = { hour: 'numeric', minute: 'numeric', hour12: false };
                    timeDisplay = '昨天'+messageTime.toLocaleTimeString(undefined,options);
                }
                else if (timeGap < 3 * 24 * 60 * 60 * 1000) //三天內
                {
                    const days = Math.floor(timeGap / (24 * 60 * 60 * 1000));
                    timeDisplay = `${days} 天前`
                }
                else {//超過三天
                    const options = { month: 'numeric', day: 'numeric' };
                    timeDisplay = messageTime.toLocaleDateString(undefined, options);
                }

                chatAvaterUrl =`data:image/png;base64,${u.memberPhoto}`;
                const chatLink=document.createElement('a');//自動生成的a標籤
                chatLink.href='#';
                chatLink.classList.add('chatLink', 'link-underline', 'link-underline-opacity-0');
                chatLink.setAttribute('inChatWithId', u.accountId);//與誰聊天
                chatLink.setAttribute('inPage', '1');
                chatLink.innerHTML = //裡面包的html
                `<div class="list-group-item list-group-item-action list-group-flush d-flex align-items-center" style="height:100px">
                             <img src="${chatAvaterUrl}" class="rounded-circle img-thumbnail user-image col-2 ">
                         <div class="col-10 mx-2">
                              <span class="">${u.name}</span> <span class="small float-end">${timeDisplay}</span>
                              </br>
                              <span class="small">${u.latestMessage.message}</span>
                           </div>
                 </div>`;
                 

                //點下聊天對象監聽器
                chatLink.addEventListener('click', async (event) => {
                    event.preventDefault();//防止連結預設的#
                    const jsChatWithId = chatLink.getAttribute('inChatWithId')
                    const jsPage = chatLink.getAttribute('inPage');
                    const currentLoginId = @Html.Raw(Json.Serialize(ViewBag.currentLoginId));
                    console.log(currentLoginId)
                    const response = await fetch(`@Url.Content("~/ChatApi/ChatDetail")?chatWithId=${jsChatWithId}&page=${jsPage}`);

                    const chatDetailData = await response.json();

                    const chatDetailDiv = document.querySelector('#chatDetail');
                    chatDetailDiv.innerHTML = ''; // 清空原內容
                    chatDetailData.map(chat => {
                        const chatContainer = document.createElement('div');
                        chatContainer.classList.add('chat-container');

                        let chatAvatar = document.createElement('img');
                        chatAvatar.src = chatAvaterUrl;

                        const chatMessage = document.createElement('span');
                        chatMessage.textContent = chat.message;
                        chatMessage.classList.add('chat-message');

                        const messageTimeEle = document.createElement('span');
                        const messageTime = new Date(chat.created);
                        const options = { year: '2-digit', month: '2-digit', day: '2-digit', hour: '2-digit', minute: '2-digit', hour12: false };
                        messageTimeEle.textContent = messageTime.toLocaleString(undefined, options);
                        messageTimeEle.classList.add('message-time','small');

                        if (chat.receiverId === currentLoginId) {
                            chatMessage.classList.add('message-left', 'chat-bubble');//訊息樣式
                            chatAvatar.classList.add( 'chat-avatar', 'img-thumbnail');
                            chatContainer.appendChild(messageTimeEle);//加入對話時間
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(chatMessage);//加入對話



                        } else {
                            chatAvatar.src = @Html.Raw(Json.Serialize(ViewBag.currentLoginAvatarUrl));
                            chatAvatar.classList.add('chat-avatar', 'img-thumbnail');
                            chatMessage.classList.add('message-right', 'chat-bubble');
                            chatContainer.appendChild(chatMessage);//加入對話
                            chatContainer.appendChild(chatAvatar);//加入頭像
                            chatContainer.appendChild(messageTimeEle);//加入對話時間

                        }
                        chatDetailDiv.appendChild(chatContainer);

                    })
                })

                userList.appendChild(chatLink);
            
            })
        }          

            loadUser()
    </script>
}

@section Styles{
    <style>

        ::-webkit-scrollbar { /* 調整捲軸寬度 */
            width: 8px;
        }

        ::-webkit-scrollbar-thumb { /* 調整捲軸拉把部分 */
            background: #ddd;
            border-radius: 10px;
        }

        ::-webkit-scrollbar-track { /* 調整捲軸滑軌部分 */
            background: #f1f1f1;
            border-radius: 10px;
        }

        .custom-list-group {
            padding-right: 0; /* 調整list-group 右側padding的空間 */
        }

        .user-image {
            max-width: 50px; /* 最大寬度 */
            max-height: 50px; /* 最大高度 */
        }

        .chat-bubble {
            border-radius: 5px;
            display: inline-block;
            padding: 10px 18px;
            position: relative;
            margin: 10px;
            min-width: 400px;
        }

        .message-left {
            position: relative;
            background: #cdcdcd;
            border-radius: .4em;
        }

        .message-left::after {
                content: '';
                position: absolute;
                left: 0;
                top: 50%;
                width: 0;
                height: 0;
                border: 10px solid transparent;
                border-right-color: #cdd5d6;
                border-left: 0;
                border-bottom: 0;
                margin-top: -5px;
                margin-left: -10px;
        }

        .message-right {
            position: relative;
            background: #9ad2da;
            border-radius: .4em;
        }

        .message-right::after {
            content: '';
            position: absolute;
            right: 0;
            top: 50%;
            width: 0;
            height: 0;
            float: right;
            border: 10px solid transparent;
            border-left-color: #9ad2da;
            border-right: 0;
            border-bottom: 0;
            margin-top: -5px;
            margin-right: -10px;
        }

        .chat-avatar {
            width: 50px; /* 設定頭像寬度 */
            height: 50px; /* 設定頭像高度 */
            margin-right: 10px; /* 設定頭像和聊天訊息之間的間距 */
            margin-left: 10px; /* 設定頭像和聊天訊息之間的間距 */
            border-radius: 50%; /* 設定頭像為圓形 */
        }

        .chat-container {
            margin-bottom: 20px; /* 設定訊息之間的間距 */
            overflow-y: auto;
        }

        .chat-message {
            max-width: 400px;
            min-width:250px;
        }

        #chatDetail{
            width: 100%;
            max-height: 300px;
            overflow-y: auto;
            }

    </style>
}